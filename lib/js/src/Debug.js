// Generated by BUCKLESCRIPT VERSION 1.9.3, PLEASE EDIT WITH CARE
'use strict';

var List           = require("bs-platform/lib/js/list.js");
var Curry          = require("bs-platform/lib/js/curry.js");
var Debug__Utils   = require("./Debug__Utils.js");
var Debug__Browser = require("./Debug__Browser.js");

function Make(Env) {
  var instances = [/* [] */0];
  var names = [/* [] */0];
  var skips = [/* [] */0];
  var make = function (namespace) {
    var prevTime = [Date.now()];
    var instance = /* record */[
      /* namespace */namespace,
      /* color */Debug__Utils.selectColor(namespace, Env[/* colors */4]),
      /* enabled : false */0
    ];
    instances[0] = /* :: */[
      instance,
      instances[0]
    ];
    return (function (payload) {
        var curr = Date.now();
        var diff = curr - prevTime[0];
        prevTime[0] = curr;
        var formatted = Curry._3(Env[/* format */1], namespace, Debug__Utils.Format[/* ms */5](diff), payload);
        var color = "color:" + instance[/* color */1];
        return Curry._4(Env[/* log */0], formatted, color, "color: inherit", color);
      });
  };
  var _endsWithWildcard = function (namespace) {
    return +(namespace[namespace.length] === "*");
  };
  var _isSkipped = function (namespace) {
    return List.exists((function (re) {
                  return +re.test(namespace);
                }), skips[0]);
  };
  var _isNamed = function (namespace) {
    return List.exists((function (re) {
                  return +re.test(namespace);
                }), names[0]);
  };
  var isEnabled = function (namespace) {
    if (_endsWithWildcard(namespace)) {
      return /* true */1;
    } else if (_isSkipped(namespace)) {
      return /* false */0;
    } else {
      return _isNamed(namespace);
    }
  };
  var enable = function (namespaces) {
    names[0] = /* [] */0;
    skips[0] = /* [] */0;
    namespaces.split((/[/s,]+/)).filter((function (ns) {
              return +(ns !== "");
            })).forEach((function (namespace) {
            var namespace$1 = namespace.replace((/`*/g), ".*?");
            if (namespace$1[0] === "-") {
              var namespace$2 = namespace$1.substr(1);
              skips[0] = /* :: */[
                new RegExp("^" + (String(namespace$2) + "\$")),
                skips[0]
              ];
              return /* () */0;
            } else {
              names[0] = /* :: */[
                new RegExp("^" + (String(namespace$1) + "\$")),
                names[0]
              ];
              return /* () */0;
            }
          }));
    return List.iter((function (i) {
                  i[/* enabled */2] = isEnabled(i[/* namespace */0]);
                  return /* () */0;
                }), instances[0]);
  };
  var disable = function () {
    return enable("");
  };
  return /* module */[
          /* instances */instances,
          /* names */names,
          /* skips */skips,
          /* make */make,
          /* _endsWithWildcard */_endsWithWildcard,
          /* _isSkipped */_isSkipped,
          /* _isNamed */_isNamed,
          /* isEnabled */isEnabled,
          /* enable */enable,
          /* disable */disable
        ];
}

var instances = [/* [] */0];

var names = [/* [] */0];

var skips = [/* [] */0];

function make(namespace) {
  var prevTime = [Date.now()];
  var instance = /* record */[
    /* namespace */namespace,
    /* color */Debug__Utils.selectColor(namespace, Debug__Browser.colors),
    /* enabled : false */0
  ];
  instances[0] = /* :: */[
    instance,
    instances[0]
  ];
  return (function (payload) {
      var curr = Date.now();
      var diff = curr - prevTime[0];
      prevTime[0] = curr;
      var formatted = Debug__Browser.format(namespace, Debug__Utils.Format[/* ms */5](diff), payload);
      var color = "color:" + instance[/* color */1];
      return Debug__Browser.log(formatted, color, "color: inherit", color);
    });
}

function _endsWithWildcard(namespace) {
  return +(namespace[namespace.length] === "*");
}

function _isSkipped(namespace) {
  return List.exists((function (re) {
                return +re.test(namespace);
              }), skips[0]);
}

function _isNamed(namespace) {
  return List.exists((function (re) {
                return +re.test(namespace);
              }), names[0]);
}

function isEnabled(namespace) {
  if (_endsWithWildcard(namespace)) {
    return /* true */1;
  } else if (_isSkipped(namespace)) {
    return /* false */0;
  } else {
    return _isNamed(namespace);
  }
}

function enable(namespaces) {
  names[0] = /* [] */0;
  skips[0] = /* [] */0;
  namespaces.split((/[/s,]+/)).filter((function (ns) {
            return +(ns !== "");
          })).forEach((function (namespace) {
          var namespace$1 = namespace.replace((/`*/g), ".*?");
          if (namespace$1[0] === "-") {
            var namespace$2 = namespace$1.substr(1);
            skips[0] = /* :: */[
              new RegExp("^" + (String(namespace$2) + "\$")),
              skips[0]
            ];
            return /* () */0;
          } else {
            names[0] = /* :: */[
              new RegExp("^" + (String(namespace$1) + "\$")),
              names[0]
            ];
            return /* () */0;
          }
        }));
  return List.iter((function (i) {
                i[/* enabled */2] = isEnabled(i[/* namespace */0]);
                return /* () */0;
              }), instances[0]);
}

function disable() {
  return enable("");
}

var Utils = 0;

var Browser = 0;

exports.Utils             = Utils;
exports.Browser           = Browser;
exports.Make              = Make;
exports.instances         = instances;
exports.names             = names;
exports.skips             = skips;
exports.make              = make;
exports._endsWithWildcard = _endsWithWildcard;
exports._isSkipped        = _isSkipped;
exports._isNamed          = _isNamed;
exports.isEnabled         = isEnabled;
exports.enable            = enable;
exports.disable           = disable;
/* No side effect */
